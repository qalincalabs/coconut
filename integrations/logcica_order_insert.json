{
  "name": "logcica order insert",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        640,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "const a = item.shippingAddress\nitem.shippingAddress.mapsSearchQuery = `${a.street}, ${a.postalCode} ${a.locality}, ${a.country.name ?? a.country.code}`.replace(/\\s/g, '+');\nitem.itemsQuantitySum = item.lines.reduce((acc, cur) => acc + cur.quantity.value,0);\nitem.url = item.url\nreturn item;"
      },
      "name": "Enrich",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1080,
        260
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "address",
              "value": "={{$node[\"Enrich\"].json[\"shippingAddress\"][\"mapsSearchQuery\"]}}"
            },
            {
              "name": "key",
              "value": "={{$env.COCONUT_GOOGLE_MAPS_API_KEY}}"
            }
          ]
        }
      },
      "name": "Geocode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1400,
        -60
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation insertOneOrder($order: OrderInsertInput!) {\n  insertOneOrder(data: $order) {\n    number\n  }\n}",
        "variables": "={\n \"order\": {{JSON.stringify($node[\"Order\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "GraphQL insert order",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        5140,
        -300
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertPlace($query: PlaceQueryInput!, $data: PlaceInsertInput!) {\n  upsertOnePlace(query: $query, data: $data) {\n    _id\n    name\n    address {\n      postalCode\n      street\n    }\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"][\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert shipping address place",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2320,
        200
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertShippingMethod($query: ShippingMethodQueryInput!, $data: ShippingMethodInsertInput!) {\n  upsertOneShippingMethod(query: $query, data: $data) {\n    _id\n    name\n    owner {\n      workspace {\n        name\n      }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"][\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert shipping method",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2560,
        200
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "query getOrderRelationships($shippingAddressPlaceIds: [String!]!, $shippingMethodIds: [String!]!, $linesProductsIds: [String!]!, $linesCatalogItemsIds: [String!]!) {\n  shippingAddressPlace: place(query: {ids_in: $shippingAddressPlaceIds}) {\n    _id\n    address {\n      street\n      postalCode\n    }\n  }\n  shippingMethod: shippingMethod(query: {ids_in: $shippingMethodIds}) {\n    _id\n    name\n  }\n  lineProducts: products(query: {ids_in: $linesProductsIds}) {\n    _id\n    ids\n    name\n  }\n  lineItems: catalogItems(query: {ids_in: $linesCatalogItemsIds}) {\n    _id\n    ids\n    name\n  }\n}",
        "variables": "={\n  \"shippingMethodIds\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"][\"ids\"])}},\n  \"shippingAddressPlaceIds\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"][\"ids\"])}},\n  \"linesProductsIds\":{{JSON.stringify($node[\"Decorated order\"].json[\"productsIds\"])}},\n  \"linesCatalogItemsIds\":{{JSON.stringify($node[\"Decorated order\"].json[\"catalogItemsIds\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Get order relationships",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        4740,
        -300
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "query getOrderRelationships($sellerWorkspaceIds: [String!]!, $brokerMarketplaceKey: String!) {\n  sellerWorkspace: workspace(query: {ids_in: $sellerWorkspaceIds}) {\n    _id\n    name\n  }\n  brokerWorkspace: workspace(query: {marketplace: {key: $brokerMarketplaceKey}}) {\n    _id\n    name\n  }\n}",
        "variables": "={\n  \"sellerWorkspaceIds\": {{JSON.stringify($json[\"seller\"][\"workspace\"][\"ids\"])}},\n  \"brokerMarketplaceKey\": \"{{$json[\"broker\"][\"workspace\"][\"marketplace\"][\"key\"]}}\"\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Get order first relationships",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        1360,
        160
      ]
    },
    {
      "parameters": {
        "functionCode": "const order = $node[\"Enrich\"].json\nconst orderRelationships = $node[\"Get order first relationships\"].json.data\n\norder.seller.workspace =  {\n  link: orderRelationships.sellerWorkspace._id\n}\n\norder.broker.workspace =  {\n  link: orderRelationships.brokerWorkspace._id\n}\n\nif(order.shippingAddress.place.geo == null){\n  const mapsShippingGeo = $node[\"Geocode\"].json.results[0].geometry.location\n  order.shippingAddress.place.geo = {\n    type: \"Point\",\n    coordinates: [mapsShippingGeo.lng, mapsShippingGeo.lat]\n  }\n}\n\nconst owner = {\n  workspace: {\n    link: order.seller.workspace.link\n  }\n}\n\norder.shippingAddress.place.owner = owner\n\nif(order.shippingMethod != null)\n  order.shippingMethod.owner = owner\n\norder.lines.forEach(l => l.product.owner = owner)\norder.lines.forEach(l => l.item.owner = owner)\n\norder.products = order.lines.map(l => l.product);\norder.productsIds = order.lines.reduce((acc,val) => acc = acc.concat(val.product.ids),[]);\n\norder.catalogItems = order.lines.map(l => l.item)\norder.catalogItemsIds = order.lines.reduce((acc,val) => acc = acc.concat(val.item.ids),[]);\nreturn order"
      },
      "name": "Decorated order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1780,
        160
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertCatalogItem($query: CatalogItemQueryInput!, $data: CatalogItemInsertInput!) {\n  upsertOneCatalogItem(query: $query, data: $data) {\n    _id\n    name\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Catalog items\"].json[\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Catalog items\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert catalog items",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2360,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"Decorated order\").reduce((acc, val) => acc = acc.concat(val.json.catalogItems),[]).map(i => ({json: i}))"
      },
      "name": "Catalog items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2160,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"Decorated order\").reduce((acc, val) => acc = acc.concat(val.json.products),[]).map(i => ({json: i}))"
      },
      "name": "Products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2060,
        600
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertProduct($query: ProductQueryInput!, $data: ProductInsertInput!) {\n  upsertOneProduct(query: $query, data: $data) {\n    _id\n    name\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Enrich product\"].json[\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Enrich product\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert products",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        3340,
        1120
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "const order = $node[\"Decorated order\"].json\nconst orderRelationships = $node[\"Get order relationships\"].json.data\n\norder.shippingAddress.place = {\n  link: orderRelationships.shippingAddressPlace._id\n}\n\norder.shippingMethod = {\n  link: orderRelationships.shippingMethod._id\n}\n\norder.lines.forEach(l => {\n  l.product = {\n    _id: orderRelationships.lineProducts.find(p => p.ids.includes(l.product.ids[0]))._id\n  }\n  //l.product1 = orderRelationships.lineProducts.find(p => p.ids.includes(l.product.ids[0]))._id\n  l.item = {\n    _id: orderRelationships.lineItems.find(p => p.ids.includes(l.item.ids[0]))._id\n  }\n})\n\ndelete order.products \ndelete order.productsIds\ndelete order.catalogItems\ndelete order.catalogItemsIds\ndelete order.shippingAddress.mapsSearchQuery\ndelete order.itemsQuantitySum\n\nreturn order"
      },
      "name": "Order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        4960,
        -300
      ]
    },
    {
      "parameters": {
        "functionCode": "const productCategories = $items(\"Upsert product category\")\nconst product = item.newProduct\n\nif(product == null)\n  return null\n\nfunction findCommonElements(arr1, arr2) {\n    return arr1.some(item => arr2.includes(item))\n}\n\n// TODO refactor this\nproduct.categories = {\n  link: product.categories.map(c => \n   productCategories.find(pc => \n    findCommonElements(pc.json.data.upsertOneProductCategory.ids,c.ids))\n     .json.data.upsertOneProductCategory._id\n  )\n}\n\ndelete product.group\n\nreturn product;"
      },
      "name": "Enrich product",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        3160,
        1120
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "/*\nconst json = {\n  \"number\": \"wc_order_ludMH9rT5yQFU\",\n  \"date\": \"2022-05-17T10:37:23Z\",\n  \"url\": \"https://www.digicirco.org/wp-admin/post.php?post=139&action=edit\",\n  \"confirmed\": true,\n  \"buyer\": {\n    \"name\": \"Olivier Wouters\"\n  },\n  \"seller\": {\n    \"name\": \"digicirco.org\",\n    \"workspace\": {\n      \"ids\": [\"digicirco.org\"]\n    }\n  },\n  \"broker\": {\n    \"name\": \"WooCommerce\",\n    \"workspace\": {\n      \"marketplace\": {\n        \"key\": \"woocommerce\"\n      }\n    }\n  },\n  \"shippingMethod\": {\n    \"ids\": [\"gid://woocommerce/ShippingMethod/none\"],\n    \"name\": \"Pas de méthode de livraison\"\n  },\n  \"shippingAddress\": {\n    \"name\": \"Olivier Wouters\",\n    \"street\": \"Grand rue, 40\",\n    \"postalCode\": \"6850\",\n    \"locality\": \"Carlsbourg\",\n    \"country\": {\n      \"code\": \"BE\"\n    },\n    \"place\": {\n      \"ids\": [\n        \"digicirco.org/places/Olivier Wouters-Grand rue, 40-6850-Carlsbourg-BE\"\n      ],\n      \"address\": {\n        \"street\": \"Grand rue, 40\",\n        \"postalCode\": \"6850\",\n        \"locality\": \"Carlsbourg\",\n        \"country\": {\n          \"code\": \"BE\"\n        }\n      }\n    }\n  },\n  \"lines\": [\n    {\n      \"name\": \"Carotte - Mauve\",\n      \"product\": {\n        \"ids\": [\"digicirco.org/products/137\"],\n        \"name\": \"Carotte - Mauve\",\n        \"createdAt\": \"2022-05-17T08:33:57Z\",\n        \"categories\": [\n          {\n            \"ids\": [\"digicirco.org/productcategories/19\"],\n            \"name\": \"Légumes\",\n            \"classification\": {\n              \"key\": \"woocommerce-digicirco.org\",\n              \"name\": \"WooCommerce - digicirco.org\"\n            }\n          },\n          {\n            \"ids\": [\"digicirco.org/productcategories/20\"],\n            \"name\": \"Légumes frais\",\n            \"classification\": {\n              \"key\": \"woocommerce-digicirco.org\",\n              \"name\": \"WooCommerce - digicirco.org\"\n            }\n          }\n        ],\n        \"group\": {\n          \"ids\": [\"https://www.digicirco.org/products/135\"],\n          \"name\": \"Carotte\",\n          \"createdAt\": \"2022-05-17T08:30:35Z\"\n        }\n      },\n      \"item\": {\n        \"ids\": [\"digicirco.org/catalogitems/137\"],\n        \"name\": \"Carotte - Mauve\",\n        \"createdAt\": \"2022-05-17T08:33:57Z\"\n      },\n      \"quantity\": {\n        \"value\": 2\n      }\n    },\n    {\n      \"name\": \"Gobelets Beeyo 330 Ml\",\n      \"product\": {\n        \"ids\": [\"digicirco.org/products/117\"],\n        \"name\": \"Gobelets Beeyo 330 Ml\",\n        \"createdAt\": \"2022-05-13T09:46:53Z\",\n        \"categories\": [\n          {\n            \"ids\": [\"digicirco.org/productcategories/17\"],\n            \"name\": \"Verres réutilisables\",\n            \"classification\": {\n              \"key\": \"woocommerce-digicirco.org\",\n              \"name\": \"WooCommerce - digicirco.org\"\n            }\n          }\n        ]\n      },\n      \"item\": {\n        \"ids\": [\"digicirco.org/catalogitems/117\"],\n        \"name\": \"Gobelets Beeyo 330 Ml\",\n        \"createdAt\": \"2022-05-13T09:46:53Z\"\n      },\n      \"quantity\": {\n        \"value\": 3\n      }\n    }\n  ]\n}\n*/\n\nconst json = {\n\"number\": \"R505643351\",\n\"url\": \"https://openfoodnetwork.be/admin/orders/R505643351/edit\",\n\"date\": \"2022-07-04T23:00:00.000Z\",\n\"confirmed\": true,\n\"buyer\": {\n\"name\": \"Olivier Wouters\"\n},\n\"seller\": {\n\"name\": \"Comptoir Demo OFN\",\n\"workspace\": {\n\"ids\": [\n\"https://openfoodnetwork.be/enterprises/591/main\"\n]\n}\n},\n\"broker\": {\n\"name\": \"OFN\",\n\"workspace\": {\n\"marketplace\": {\n\"key\": \"ofn-be\"\n}\n}\n},\n\"lines\": [\n{\n\"name\": \"Lait\",\n\"item\": {\n\"ids\": [\n\"https://openfoodnetwork.be/enterprises/591/catalogs/main/items/23711\"\n],\n\"name\": \"Lait\"\n},\n\"product\": {\n\"name\": \"Lait\",\n\"ids\": [\n\"ofn_be/variant/id/23723\"\n],\n\"group\": {\n\"ids\": [\n\"ofn_be/product/id/9706\"\n],\n\"name\": \"Lait\"\n},\n\"categories\": [\n{\n\"ids\": [\n\"https://openfoodnetwork.be/categories/2\"\n],\n\"classification\": {\n\"key\": \"ofn-be\",\n\"name\": \"OFN BE\"\n}\n}\n]\n},\n\"quantity\": {\n\"value\": 1\n}\n},\n{\n\"name\": \"Sac de carottes bleues\",\n\"item\": {\n\"ids\": [\n\"https://openfoodnetwork.be/enterprises/591/catalogs/main/items/23697\"\n],\n\"name\": \"Sac de carottes bleues\"\n},\n\"product\": {\n\"name\": \"Sac de carottes bleues\",\n\"ids\": [\n\"ofn_be/variant/id/23722\" //23697\n],\n\"group\": {\n\"ids\": [\n\"ofn_be/product/id/9705\"\n],\n\"name\": \"Sac de carottes bleues\"\n},\n\"categories\": [\n{\n\"ids\": [\n\"https://openfoodnetwork.be/categories/2\"\n],\n\"classification\": {\n\"key\": \"ofn-be\",\n\"name\": \"OFN BE\"\n}\n}\n]\n},\n\"quantity\": {\n\"value\": 1\n}\n}\n],\n\"shippingAddress\": {\n\"name\": \"Olivier Wouters\",\n\"phone\": \"+32999999\",\n\"street\": \"Grand rue, 40\",\n\"postalCode\": \"6850\",\n\"locality\": \"Carlsbourg\",\n\"country\": {\n\"name\": \"Belgium\"\n},\n\"place\": {\n\"ids\": [\n\"https://openfoodnetwork.be/addresses/62719\"\n],\n\"address\": {\n\"street\": \"Grand rue, 40\",\n\"postalCode\": \"6850\",\n\"locality\": \"Carlsbourg\",\n\"country\": {\n\"name\": \"Belgium\"\n}\n}\n}\n},\n\"shippingMethod\": {\n\"ids\": [\n\"https://openfoodnetwork.be/shippingmethods/112\"\n],\n\"name\": \"Livraison par Bpost\",\n\"description\": \"La commande vous sera livrée dans les 2 jours ouvrables après la date choisie lors de votre commande - vu les circonstances ce délai peut-être plus long. Exemple : si commande prête pour le lundi 20/04, elle vous sera livrée vers le 22/04.\"\n}\n}\n\n\nreturn json;"
      },
      "name": "Test order init data",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        880,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"shippingAddress\"][\"place\"][\"geo\"] == null}}",
              "value2": true
            }
          ]
        }
      },
      "name": "If not geocoded",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1180,
        -40
      ]
    },
    {
      "parameters": {
        "functionCode": "const productCategory = $node[\"Categories\"].json\nconst productClassification = $node[\"Upsert product classification\"].json.data.upsertOneProductClassification\n\nproductCategory.classification = {\n  link: productClassification._id\n}\n\nreturn productCategory;"
      },
      "name": "Enrich product category",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        2320,
        960
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertProductClassification($query: ProductClassificationQueryInput!, $data: ProductClassificationInsertInput!) {\n  upsertOneProductClassification(query: $query, data: $data) {\n    _id\n    name\n    key\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"key_in\": [\"{{$node[\"Categories\"].json[\"classification\"][\"key\"]}}\"]\n  },\n  \"data\": {{JSON.stringify($node[\"Categories\"].json[\"classification\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert product classification",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2140,
        960
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertProductCategory($query: ProductCategoryQueryInput!, $data: ProductCategoryInsertInput!) {\n  upsertOneProductCategory(query: $query, data: $data) {\n    _id\n    ids\n    name\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Enrich product category\"].json[\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Enrich product category\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert product category",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2480,
        960
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "mode": "passThrough",
        "output": "input2"
      },
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1580,
        160
      ]
    },
    {
      "parameters": {
        "functionCode": "const array = []\n\nfor(p of items?.map(i => i.json.newProduct) ?? []){\n  p?.categories.forEach(c => array.push(c))\n}\n\nreturn array?.filter((value, index, self) => index === self.findIndex((t) => (t.key === value.key))) ?? []"
      },
      "name": "Categories",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1720,
        1020
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "query getProduct($ids: [String!]!) {\n  product(query: {ids_in: $ids}) {\n    _id\n    ids\n    name\n    gtin\n  }\n}",
        "variables": "={\n  \"ids\":{{JSON.stringify($node[\"Products\"].json.ids)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Find product",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2300,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.existingProduct?.gtin == null}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1460,
        1260
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "functionCode": "return {\n  newProduct: $node[\"Products\"].json,\n  existingProduct: item.data.product\n};"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        2480,
        600
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4540,
        -300
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"Decorated order\")"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2620,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"Decorated order\")"
      },
      "name": "Function2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4020,
        620
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4300,
        20
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"Decorated order\")"
      },
      "name": "Function3",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2720,
        200
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        3800,
        620
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4120,
        380
      ]
    },
    {
      "parameters": {
        "mode": "passThrough",
        "output": "input2"
      },
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        3600,
        1240
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "functionCode": "return $items(\"FunctionItem\")"
      },
      "name": "Function4",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2980,
        1120
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$items().length == 1 && Object.keys($items()[0].json).length == 0}}"
            }
          ]
        }
      },
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1880,
        1020
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$items().length == 1 && Object.keys($items()[0].json).length == 0}}"
            }
          ]
        }
      },
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2760,
        1200
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "passThrough",
        "output": "input2"
      },
      "name": "Merge6",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4000,
        1360
      ]
    },
    {
      "parameters": {
        "functionCode": "return $items(\"FunctionItem\")"
      },
      "name": "Function5",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2980,
        1260
      ]
    }
  ],
  "connections": {
    "Enrich": {
      "main": [
        [
          {
            "node": "If not geocoded",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get order first relationships",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert shipping address place": {
      "main": [
        [
          {
            "node": "Upsert shipping method",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get order relationships": {
      "main": [
        [
          {
            "node": "Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert shipping method": {
      "main": [
        [
          {
            "node": "Function3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get order first relationships": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Decorated order": {
      "main": [
        [
          {
            "node": "Upsert shipping address place",
            "type": "main",
            "index": 0
          },
          {
            "node": "Catalog items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Products",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Catalog items": {
      "main": [
        [
          {
            "node": "Upsert catalog items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Products": {
      "main": [
        [
          {
            "node": "Find product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order": {
      "main": [
        [
          {
            "node": "GraphQL insert order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich product": {
      "main": [
        [
          {
            "node": "Upsert products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Test order init data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test order init data": {
      "main": [
        [
          {
            "node": "Enrich",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If not geocoded": {
      "main": [
        [
          {
            "node": "Geocode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert product classification": {
      "main": [
        [
          {
            "node": "Enrich product category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich product category": {
      "main": [
        [
          {
            "node": "Upsert product category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert product category": {
      "main": [
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Decorated order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Geocode": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Categories": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find product": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Categories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "FunctionItem": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Get order relationships",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert catalog items": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert products": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Function2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function2": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function4": {
      "main": [
        [
          {
            "node": "Enrich product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Upsert product classification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "Function4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Function5": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": 5,
  "tags": []
}