{
  "name": "order to shipment ofn logcica",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        100,
        310
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.reduce((acc,val) => acc = acc.concat(val.json.orders),[]) .map(item => {\n  return {\n    json: item\n  }\n})\n"
      },
      "name": "Map list",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        620,
        220
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "name": "Time trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        100,
        150
      ]
    },
    {
      "parameters": {
        "sheetId": "14UW1VPd6AMLknrcV-nzJyN82QdZBuwDYFvq5y40si_w",
        "range": "order-to-shipment-ofn-purplship!A:B",
        "options": {}
      },
      "name": "Get subscriptions",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        280,
        220
      ],
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://openfoodnetwork.be/api/v0/orders",
        "options": {
          "splitIntoItems": false
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "q[created_at_gt]",
              "value": "={{new Date(new Date().setDate(new Date().getDate()-1)).toISOString().slice(0, 10)}}"
            },
            {
              "name": "q[distributor_id_eq]",
              "value": "={{$json[\"enterpriseId\"]}}"
            },
            {
              "name": "q[state_eq]",
              "value": "complete"
            }
          ]
        }
      },
      "name": "Get orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        450,
        220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8",
          "name": "ofn be demo account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://openfoodnetwork.be/api/v0/orders/{{$json[\"number\"]}}",
        "options": {}
      },
      "name": "Get order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1260,
        270
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8",
          "name": "ofn be demo account"
        }
      }
    },
    {
      "parameters": {
        "channel": "acteur-comptoir-demo-ofn",
        "text": "=",
        "jsonParameters": true,
        "attachments": [],
        "otherOptions": {
          "unfurl_links": false,
          "unfurl_media": false
        },
        "blocksJson": "= [\n {\n \"type\": \"section\",\n \"text\": {\n \"type\": \"mrkdwn\",\n \"text\": \":postbox: *Nouvel envoi :* Commande <https://openfoodnetwork.be/admin/orders/{{$json[\"number\"]}}/edit|{{$json[\"number\"]}}> pour {{$json[\"distributor_name\"]}} via *OFN*\"\n },\n \"accessory\": {\n \"type\": \"overflow\",\n \"options\": [\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":truck: Planifier\",\n \"emoji\": true\n },\n \"value\": \"shipment_schedule\"\n },\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":house: Livr√©\",\n \"emoji\": true\n },\n \"value\": \"shipment_delivered\"\n },\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":octagonal_sign: Annuler\",\n \"emoji\": true\n },\n \"value\": \"shipment_cancel\"\n }\n ]\n }\n },\n {\n \"type\": \"context\",\n \"elements\": [\n {\n \"type\": \"mrkdwn\",\n \"text\": \":aerial_tramway: {{$json[\"shipping_method\"][\"name\"]}}\"\n },\n {\n \"type\": \"mrkdwn\",\n \"text\": \":round_pushpin: {{$json[\"full_name\"]}}, <https://maps.google.com/?q={{$json[\"ship_address\"][\"mapsSearchQuery\"]}}|{{$json[\"ship_address\"][\"address1\"]}}, {{$json[\"ship_address\"][\"address2\"]}}, {{$json[\"ship_address\"][\"zipcode\"]}} {{$json[\"ship_address\"][\"city\"]}}>\"\n },\n {\n \"type\": \"mrkdwn\",\n \"text\": \":label: {{$json[\"itemsQuantitySum\"]}} produit(s)\"\n }\n ]\n }\n ]"
      },
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1580,
        420
      ],
      "credentials": {
        "slackApi": {
          "id": "11",
          "name": "coconut bot"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const a = item.ship_address\nitem.ship_address.mapsSearchQuery = encodeURI(`${a.address1},${a.address2},${a.city},${a.state_name},${a.country_name}`);\nitem.itemsQuantitySum = item.line_items.reduce((acc, cur) => acc + cur.quantity,0);\nreturn item;"
      },
      "name": "Enrich",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1420,
        270
      ]
    },
    {
      "parameters": {
        "sheetId": "1mP7r4GhvB5TLV8KLtdKi7LW21wk2fL0IRrA2V1uc3Is",
        "range": "orders!A:A",
        "options": {}
      },
      "name": "Latest orders",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        620,
        400
      ],
      "alwaysOutputData": true,
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "mode": "removeKeyMatches",
        "propertyName1": "number",
        "propertyName2": "number"
      },
      "name": "Keep new",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        780,
        270
      ]
    },
    {
      "parameters": {
        "functionCode": "const newItem = {\n  number: item.number,\n  createdTime: new Date().toISOString()\n}\n\nreturn newItem;"
      },
      "name": "Latest order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        940,
        270
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "sheetId": "1mP7r4GhvB5TLV8KLtdKi7LW21wk2fL0IRrA2V1uc3Is",
        "range": "orders!A:B",
        "options": {
          "valueInputMode": "RAW"
        }
      },
      "name": "Append to latest orders",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        1100,
        270
      ],
      "alwaysOutputData": false,
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const ofnOrder = $node[\"Enrich\"].json\nconst mapsShippingGeo = $node[\"Geocode\"].json.results[0].geometry.location\nconst order = \n{\n    number: ofnOrder.number,\n    date: new Date(ofnOrder.created_at).toISOString(),\n    confirmed: true,\n    buyer: {\n      name: ofnOrder.full_name,\n    },\n    seller: {\n      name: ofnOrder.distributor_name,\n      workspace: {\n        enterprise: {\n          ids: [\"https://openfoodnetwork.be/enterprises/\" + ofnOrder.distributor.id]\n        }\n      }\n    },\n    broker: {\n      name: \"OFN\",\n      workspace: {\n        marketplace: {\n          key: \"ofn-be\"\n        }\n      }\n    },\n    lines: ofnOrder.line_items.map(i => ({\n        name: i.variant.name_to_display,\n        item: {\n          ids: [\"https://openfoodnetwork.be/enterprises/\" + ofnOrder.distributor.id + \"/catalogs/main/items/\" + i.variant.id],\n          name: i.variant.name_to_display,\n        },\n        product: {\n          name: i.variant.name_to_display,\n          ids: [\"https://openfoodnetwork.be/variants/\" + i.variant.id],\n        },\n        quantity: {\n          value:  i.quantity\n        }\n      })),\n    shippingAddress: {\n      name: ofnOrder.ship_address.firstname + \" \" + ofnOrder.ship_address.lastname,\n      phone: ofnOrder.ship_address.phone,\n      street: ofnOrder.ship_address.address1 + \", \" + ofnOrder.ship_address.address2,\n      postalCode: ofnOrder.ship_address.zipcode,\n      locality: ofnOrder.ship_address.city,\n      country: {\n        name: ofnOrder.ship_address.country_name\n      },\n      place: {\n        ids: [\"https://openfoodnetwork.be/addresses/\"+ ofnOrder.ship_address.id],\n        address: {\n          street: ofnOrder.ship_address.address1 + \", \" + ofnOrder.ship_address.address2,\n          postalCode: ofnOrder.ship_address.zipcode,\n          locality: ofnOrder.ship_address.city,\n          country: {\n            name: ofnOrder.ship_address.country_name\n          }\n        },\n        geo:{\n          type:\"Point\",\n          coordinates:[mapsShippingGeo.lng,mapsShippingGeo.lat]\n        }\n      }\n    },\n    shippingMethod: {\n      ids: [\"https://openfoodnetwork.be/shippingmethods/\"+ofnOrder.shipping_method.id],\n      name: ofnOrder.shipping_method.name,\n      description: ofnOrder.shipping_method.description\n    }\n  }\n\nreturn order;\n"
      },
      "name": "Map order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1740,
        140
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "address",
              "value": "={{$json[\"ship_address\"][\"mapsSearchQuery\"]}}"
            },
            {
              "name": "key",
              "value": "={{$env.COCONUT_GOOGLE_MAPS_API_KEY}}"
            }
          ]
        }
      },
      "name": "Geocode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1580,
        140
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation insertOneOrder($order: OrderInsertInput!) {\n  insertOneOrder(data: $order) {\n    number\n  }\n}",
        "variables": "={\n \"order\": {{JSON.stringify($node[\"Order\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "GraphQL insert order",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        3440,
        -20
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertPlace($query: PlaceQueryInput!, $data: PlaceInsertInput!) {\n  upsertOnePlace(query: $query, data: $data) {\n    _id\n    name\n    address {\n      postalCode\n      street\n    }\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"][\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert shipping address place",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2440,
        -20
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertShippingMethod($query: ShippingMethodQueryInput!, $data: ShippingMethodInsertInput!) {\n  upsertOneShippingMethod(query: $query, data: $data) {\n    _id\n    name\n    owner {\n      workspace {\n        name\n      }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"][\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert shipping method",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2440,
        180
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "query getOrderRelationships($shippingAddressPlaceIds: [String!]!, $shippingMethodIds: [String!]!, $linesProductsIds: [String!]!, $linesCatalogItemsIds: [String!]!) {\n  shippingAddressPlace: place(query: {ids_in: $shippingAddressPlaceIds}) {\n    _id\n    address {\n      street\n      postalCode\n    }\n  }\n  shippingMethod: shippingMethod(query: {ids_in: $shippingMethodIds}) {\n    _id\n    name\n  }\n  lineProducts: products(query: {ids_in: $linesProductsIds}) {\n    _id\n    ids\n    name\n  }\n  lineItems: catalogItems(query: {ids_in: $linesCatalogItemsIds}) {\n    _id\n    ids\n    name\n  }\n}",
        "variables": "={\n  \"shippingMethodIds\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingMethod\"][\"ids\"])}},\n  \"shippingAddressPlaceIds\": {{JSON.stringify($node[\"Decorated order\"].json[\"shippingAddress\"][\"place\"][\"ids\"])}},\n  \"linesProductsIds\":{{JSON.stringify($node[\"Decorated order\"].json[\"productsIds\"])}},\n  \"linesCatalogItemsIds\":{{JSON.stringify($node[\"Decorated order\"].json[\"catalogItemsIds\"])}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Get order relationships",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        3060,
        -20
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "query getOrderRelationships($sellerEnterpriseIds: [String!]!, $brokerMarketplaceKey: String!) {\n  sellerWorkspace: workspace(query: {enterprise: {ids_in: $sellerEnterpriseIds}}) {\n    _id\n    name\n  }\n  brokerWorkspace: workspace(query: {marketplace: {key: $brokerMarketplaceKey}}) {\n    _id\n    name\n  }\n}",
        "variables": "={\n  \"sellerEnterpriseIds\": {{JSON.stringify($json[\"seller\"][\"workspace\"][\"enterprise\"][\"ids\"])}},\n  \"brokerMarketplaceKey\": \"{{$json[\"broker\"][\"workspace\"][\"marketplace\"][\"key\"]}}\"\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Get order first relationships",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        1960,
        140
      ]
    },
    {
      "parameters": {
        "functionCode": "const order = $node[\"Map order\"].json\nconst orderRelationships = $node[\"Get order first relationships\"].json.data\n\norder.seller.workspace =  {\n  link: orderRelationships.sellerWorkspace._id\n}\n\norder.broker.workspace =  {\n  link: orderRelationships.brokerWorkspace._id\n}\n\nconst owner = {\n  workspace: {\n    link: order.seller.workspace.link\n  }\n}\n\norder.shippingAddress.place.owner = owner\norder.shippingMethod.owner = owner\norder.lines.forEach(l => l.product.owner = owner)\norder.lines.forEach(l => l.item.owner = owner)\n\norder.products = order.lines.map(l => l.product);\norder.productsIds = order.lines.reduce((acc,val) => acc = acc.concat(val.product.ids),[]);\n\norder.catalogItems = order.lines.map(l => l.item)\norder.catalogItemsIds = order.lines.reduce((acc,val) => acc = acc.concat(val.item.ids),[]);\nreturn order"
      },
      "name": "Decorated order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        2140,
        140
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertCatalogItem($query: CatalogItemQueryInput!, $data: CatalogItemInsertInput!) {\n  upsertOneCatalogItem(query: $query, data: $data) {\n    _id\n    name\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Catalog items\"].json[\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Catalog items\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert catalog items",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2560,
        -200
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.reduce((acc, val) => acc = acc.concat(val.json.catalogItems),[]).map(i => ({json: i}))"
      },
      "name": "Catalog items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2300,
        -200
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.reduce((acc, val) => acc = acc.concat(val.json.products),[]).map(i => ({json: i}))"
      },
      "name": "Products",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2300,
        -360
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation upsertProduct($query: ProductQueryInput!, $data: ProductInsertInput!) {\n  upsertOneProduct(query: $query, data: $data) {\n    _id\n    name\n    owner {\n     workspace {\n       name\n     }\n    }\n  }\n}",
        "variables": "={\n  \"query\": {\n    \"ids_in\": {{JSON.stringify($node[\"Products\"].json[\"ids\"])}}\n  },\n  \"data\": {{JSON.stringify($node[\"Products\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "apiKey",
              "value": "={{ $env.COCONUT_MONGO_REALM_API_KEY }}"
            }
          ]
        }
      },
      "name": "Upsert products",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2560,
        -360
      ]
    },
    {
      "parameters": {
        "mode": "passThrough",
        "output": "input2"
      },
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2820,
        -20
      ]
    },
    {
      "parameters": {
        "functionCode": "const order = $node[\"Decorated order\"].json\nconst orderRelationships = $node[\"Get order relationships\"].json.data\n\norder.shippingAddress.place = {\n  link: orderRelationships.shippingAddressPlace._id\n}\n\norder.shippingMethod = {\n  link: orderRelationships.shippingMethod._id\n}\n\norder.lines.forEach(l => {\n  l.product = {\n    _id: orderRelationships.lineProducts.find(p => p.ids.includes(l.product.ids[0]))._id\n  }\n  l.item = {\n    _id: orderRelationships.lineItems.find(p => p.ids.includes(l.item.ids[0]))._id\n  }\n})\n\ndelete order.products \ndelete order.productsIds\ndelete order.catalogItems\ndelete order.catalogItemsIds\n\nreturn order"
      },
      "name": "Order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        3260,
        -20
      ]
    }
  ],
  "connections": {
    "Time trigger": {
      "main": [
        [
          {
            "node": "Get subscriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get subscriptions": {
      "main": [
        [
          {
            "node": "Get orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get order": {
      "main": [
        [
          {
            "node": "Enrich",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Geocode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Latest orders": {
      "main": [
        [
          {
            "node": "Keep new",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get orders": {
      "main": [
        [
          {
            "node": "Map list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map list": {
      "main": [
        [
          {
            "node": "Keep new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep new": {
      "main": [
        [
          {
            "node": "Latest order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Latest order": {
      "main": [
        [
          {
            "node": "Append to latest orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append to latest orders": {
      "main": [
        [
          {
            "node": "Get order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map order": {
      "main": [
        [
          {
            "node": "Get order first relationships",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Geocode": {
      "main": [
        [
          {
            "node": "Map order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert shipping address place": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get order relationships": {
      "main": [
        [
          {
            "node": "Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert shipping method": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get order first relationships": {
      "main": [
        [
          {
            "node": "Decorated order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decorated order": {
      "main": [
        [
          {
            "node": "Upsert shipping address place",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upsert shipping method",
            "type": "main",
            "index": 0
          },
          {
            "node": "Catalog items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Catalog items": {
      "main": [
        [
          {
            "node": "Upsert catalog items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Products": {
      "main": [
        [
          {
            "node": "Upsert products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert catalog items": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert products": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Get order relationships",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order": {
      "main": [
        [
          {
            "node": "GraphQL insert order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": 5
}