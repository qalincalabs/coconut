{
  "name": "order to shipment ofn logcica",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        100,
        310
      ]
    },
    {
      "parameters": {
        "functionCode": "return items[0].json.orders.map(item => {\n  return {\n    json: item\n  }\n})\n"
      },
      "name": "Map list",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        620,
        220
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "name": "Time trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        100,
        150
      ]
    },
    {
      "parameters": {
        "sheetId": "14UW1VPd6AMLknrcV-nzJyN82QdZBuwDYFvq5y40si_w",
        "range": "order-to-shipment-ofn-purplship!A:B",
        "options": {}
      },
      "name": "Get subscriptions",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        280,
        220
      ],
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://openfoodnetwork.be/api/v0/orders",
        "options": {
          "splitIntoItems": false
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "q[created_at_gt]",
              "value": "={{new Date(new Date().setDate(new Date().getDate()-1)).toISOString().slice(0, 10)}}"
            },
            {
              "name": "q[distributor_id_eq]",
              "value": "={{$json[\"enterpriseId\"]}}"
            },
            {
              "name": "q[state_eq]",
              "value": "complete"
            }
          ]
        }
      },
      "name": "Get orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        450,
        220
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8",
          "name": "ofn be demo account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://openfoodnetwork.be/api/v0/orders/{{$json[\"number\"]}}",
        "options": {}
      },
      "name": "Get order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1260,
        270
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8",
          "name": "ofn be demo account"
        }
      }
    },
    {
      "parameters": {
        "channel": "acteur-comptoir-demo-ofn",
        "text": "=",
        "jsonParameters": true,
        "attachments": [],
        "otherOptions": {
          "unfurl_links": false,
          "unfurl_media": false
        },
        "blocksJson": "= [\n {\n \"type\": \"section\",\n \"text\": {\n \"type\": \"mrkdwn\",\n \"text\": \":postbox: *Nouvel envoi :* Commande <https://openfoodnetwork.be/admin/orders/{{$json[\"number\"]}}/edit|{{$json[\"number\"]}}> pour {{$json[\"distributor_name\"]}} via *OFN*\"\n },\n \"accessory\": {\n \"type\": \"overflow\",\n \"options\": [\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":truck: Planifier\",\n \"emoji\": true\n },\n \"value\": \"plan\"\n },\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":house: Livr√©\",\n \"emoji\": true\n },\n \"value\": \"plan\"\n },\n {\n \"text\": {\n \"type\": \"plain_text\",\n \"text\": \":octagonal_sign: Annuler\",\n \"emoji\": true\n },\n \"value\": \"cancel\"\n }\n ]\n }\n },\n {\n \"type\": \"context\",\n \"elements\": [\n {\n \"type\": \"mrkdwn\",\n \"text\": \":aerial_tramway: {{$json[\"shipping_method\"][\"name\"]}}\"\n },\n {\n \"type\": \"mrkdwn\",\n \"text\": \":round_pushpin: {{$json[\"full_name\"]}}, <https://maps.google.com/?q={{$json[\"ship_address\"][\"mapsSearchQuery\"]}}|{{$json[\"ship_address\"][\"address1\"]}}, {{$json[\"ship_address\"][\"address2\"]}}, {{$json[\"ship_address\"][\"zipcode\"]}} {{$json[\"ship_address\"][\"city\"]}}>\"\n },\n {\n \"type\": \"mrkdwn\",\n \"text\": \":label: {{$json[\"itemsQuantitySum\"]}} produit(s)\"\n }\n ]\n }\n ]"
      },
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1580,
        420
      ],
      "credentials": {
        "slackApi": {
          "id": "11",
          "name": "coconut bot"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const a = item.ship_address\nitem.ship_address.mapsSearchQuery = encodeURI(`${a.address1},${a.address2},${a.city},${a.state_name},${a.country_name}`);\nitem.itemsQuantitySum = item.line_items.reduce((acc, cur) => acc + cur.quantity,0);\nreturn item;"
      },
      "name": "Enrich",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1420,
        270
      ]
    },
    {
      "parameters": {
        "sheetId": "1mP7r4GhvB5TLV8KLtdKi7LW21wk2fL0IRrA2V1uc3Is",
        "range": "orders!A:A",
        "options": {}
      },
      "name": "Latest orders",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        620,
        400
      ],
      "alwaysOutputData": true,
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "mode": "removeKeyMatches",
        "propertyName1": "number",
        "propertyName2": "number"
      },
      "name": "Keep new",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        780,
        270
      ]
    },
    {
      "parameters": {
        "functionCode": "const newItem = {\n  number: item.number,\n  createdTime: new Date().toISOString()\n}\n\nreturn newItem;"
      },
      "name": "Latest order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        940,
        270
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "sheetId": "1mP7r4GhvB5TLV8KLtdKi7LW21wk2fL0IRrA2V1uc3Is",
        "range": "orders!A:B",
        "options": {
          "valueInputMode": "RAW"
        }
      },
      "name": "Append to latest orders",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        1100,
        270
      ],
      "alwaysOutputData": false,
      "credentials": {
        "googleApi": {
          "id": "3",
          "name": "Digicirco Google"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const ofnOrder = $node[\"Enrich\"].json\nconst mapsShippingGeo = $node[\"Geocode\"].json.results[0].geometry.location\nconst order = \n{\n    number: ofnOrder.number,\n    date: new Date(ofnOrder.created_at).toISOString(),\n    confirmed: true,\n    buyer: {\n      name: ofnOrder.full_name,\n    },\n    seller: {\n      name: ofnOrder.distributor_name\n    },\n    broker: {\n      name: \"OFN\",\n    },\n    items: ofnOrder.line_items.map(i => ({\n        name: i.variant.product_name,\n        quantity: {\n          value:  i.quantity\n        }\n      })),\n    shippingAddress: {\n      name: ofnOrder.ship_address.firstname + \" \" + ofnOrder.ship_address.lastname,\n      phone: ofnOrder.ship_address.phone,\n      streetAddress: ofnOrder.ship_address.address1 + \", \" + ofnOrder.ship_address.address2,\n      postalCode: ofnOrder.ship_address.zipcode,\n      locality: ofnOrder.ship_address.city,\n      country: {\n        name: ofnOrder.ship_address.country_name\n      },\n      geo:{\n        type:\"Point\",\n        coordinates:[mapsShippingGeo.lng,mapsShippingGeo.lat]\n      }\n    },\n    shippingMethod: {\n      name: ofnOrder.shipping_method.name,\n      description: ofnOrder.shipping_method.description\n    }\n  }\n\nreturn order;\n"
      },
      "name": "Map order",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1740,
        140
      ]
    },
    {
      "parameters": {
        "endpoint": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/graphql",
        "requestFormat": "json",
        "query": "mutation insertOneOrder($order: OrderInsertInput!) {\n  insertOneOrder(data: $order) {\n    number\n  }\n}",
        "variables": "={\n \"order\": {{JSON.stringify($node[\"Map order\"].json)}}\n}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$node[\"Mongo Realm Access Token\"].json.access_token}}"
            }
          ]
        }
      },
      "name": "GraphQL",
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        2080,
        140
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://realm.mongodb.com/api/client/v2.0/app/logcica-pfufx/auth/providers/api-key/login",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"key\": \"{{ $env.COCONUT_MONGO_REALM_API_KEY }}\"\n}"
      },
      "name": "Mongo Realm Access Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1920,
        140
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "address",
              "value": "={{$json[\"ship_address\"][\"mapsSearchQuery\"]}}"
            },
            {
              "name": "key",
              "value": "={{$env.COCONUT_GOOGLE_MAPS_API_KEY}}"
            }
          ]
        }
      },
      "name": "Geocode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1580,
        140
      ]
    }
  ],
  "connections": {
    "Time trigger": {
      "main": [
        [
          {
            "node": "Get subscriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get subscriptions": {
      "main": [
        [
          {
            "node": "Get orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get order": {
      "main": [
        [
          {
            "node": "Enrich",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Geocode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Latest orders": {
      "main": [
        [
          {
            "node": "Keep new",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get orders": {
      "main": [
        [
          {
            "node": "Map list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map list": {
      "main": [
        [
          {
            "node": "Keep new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep new": {
      "main": [
        [
          {
            "node": "Latest order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Latest order": {
      "main": [
        [
          {
            "node": "Append to latest orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append to latest orders": {
      "main": [
        [
          {
            "node": "Get order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map order": {
      "main": [
        [
          {
            "node": "Mongo Realm Access Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mongo Realm Access Token": {
      "main": [
        [
          {
            "node": "GraphQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Geocode": {
      "main": [
        [
          {
            "node": "Map order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "id": 5
}